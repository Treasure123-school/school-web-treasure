To ensure that the profile data is displayed correctly on the teacher's dashboard, let's follow these steps to troubleshoot and fix the issue:

Check API Response: Verify that the API endpoint /api/teacher/profile/me is returning the expected profile data when called.

In your , ensure the code for fetching the teacher's profile looks like this:

app.get('/api/teacher/profile/me', authenticateUser, async (req, res) => {
  try {
    const userId = req.user!.id;
    const profile = await storage.getTeacherProfile(userId);
    if (!profile) {
      return res.status(404).json({ message: 'Profile not found' });
    }
    // Get user data to merge with profile
    const user = await storage.getUser(userId);
    console.log('✅ Teacher profile fetched for dashboard:', {
      userId,
      ...profile
    });
    // Return complete profile with user data
    const completeProfile = {
      ...profile,
      firstName: user?.firstName,
      lastName: user?.lastName,
      email: user?.email,
      phone: user?.phone,
      profileImageUrl: user?.profileImageUrl
    };
    res.json(completeProfile);
  } catch (error) {
    console.error('❌ Error fetching teacher profile:', error);
    res.status(500).json({ message: 'Failed to fetch profile', error: error.message });
  }
});
Ensure Proper Frontend Code: In your , ensure that you're properly querying and handling the profile data:

const { data: teacherProfile, isLoading: profileLoading, error: profileError } = useQuery({
  queryKey: ['/api/teacher/profile/me'],
  queryFn: async () => {
    const response = await apiRequest('GET', '/api/teacher/profile/me');
    if (!response.ok) {
      throw new Error('Failed to fetch profile');
    }
    const data = await response.json();
    console.log('📊 Profile data received:', data);
    return data;
  },
  enabled: !!user && !!profileStatus?.hasProfile,
});
if (profileLoading) {
  return <div>Loading profile data...</div>;
}
if (teacherProfile) {
  return (
    <div>
      <strong>Name:</strong> {teacherProfile.firstName} {teacherProfile.lastName}
      <strong>Department:</strong> {teacherProfile.department}
      {/* Other fields */}
    </div>
  );
} else {
  return <div>No profile information available.</div>;
}
Check Status and Redirect Logic: Make sure that the conditionals to redirect to the profile setup page or to show the profile are set up properly.

Use the useEffect hook to handle navigation based on the profile status:

useEffect(() => {
  if (!statusLoading && profileStatus) {
    if (!profileStatus.hasProfile) {
      navigate('/portal/teacher/profile-setup');
    }
  }
}, [profileStatus, statusLoading, navigate]);
Examine Data Persistence: Ensure that the profile data is correctly saved to the database during the profile setup process in . If the data isn't saved correctly, it won't appear on the dashboard.

Testing the Endpoints: You can manually test the API using Postman or similar tools to ensure that the profile data is stored correctly.